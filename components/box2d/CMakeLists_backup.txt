idf_component_register()

include(ExternalProject)

set(BOX2D_INSTALL_DIR ${CMAKE_CURRENT_BINARY_DIR}/box2d_install)

set(patch_command ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_SOURCE_DIR}/box2c.patch <SOURCE_DIR> && git reset --hard && git apply <SOURCE_DIR>/box2c.patch)

externalproject_add(box2d_proj
    GIT_REPOSITORY "https://github.com/erincatto/box2c.git"
    GIT_TAG "main"

    PATCH_COMMAND ${patch_command}

    CMAKE_ARGS
        # Use the same CMake toolchain file as for the main project.
        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
        # Pass the install directory to the subproject.
        -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
        -DESP_PLATFORM=1
        -DCMAKE_BUILD_TYPE=DEBUG

    # These options are set so that Ninja immediately outputs
    # the subproject build to the terminal. Otherwise it looks like the
    # build process "hangs" while the subproject is being built.
    USES_TERMINAL_DOWNLOAD TRUE
    USES_TERMINAL_CONFIGURE TRUE
    USES_TERMINAL_BUILD TRUE

    # Specify the installation directory for the subproject
    INSTALL_DIR ${BOX2D_INSTALL_DIR}
    # Let CMake know that the library is generated by the subproject build step.
    BUILD_BYPRODUCTS "${BOX2D_INSTALL_DIR}/lib/libbox2d.a"
)

ExternalProject_Get_property(box2d_proj SOURCE_DIR)

# Now that the subproject build is set up, we need to consume the results
# of the build: the header file and the static library.
# To do this, define an imported CMake library:
add_prebuilt_library(box2d_lib "${BOX2D_INSTALL_DIR}/lib/libbox2d.a")
target_include_directories(box2d_lib INTERFACE "${SOURCE_DIR}/include")
add_dependencies(box2d_lib box2d_proj)

# Link the imported library to the current component.
target_link_libraries(${COMPONENT_LIB} INTERFACE box2d_lib)